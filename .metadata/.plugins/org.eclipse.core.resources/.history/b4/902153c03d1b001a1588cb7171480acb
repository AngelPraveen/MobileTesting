package configuration;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.ISelect;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.TestListenerAdapter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import io.appium.java_client.PerformsTouchActions;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.touch.offset.PointOption;
import static io.appium.java_client.touch.offset.PointOption.point;
import org.testng.Assert;
import org.testng.ITestContext;

import static org.testng.Assert.assertTrue;




public class AppConfig {
	WebDriver driver;
	PerformsTouchActions driver1;
	Properties prop = new Properties();
	InputStream inputStream = getClass().getClassLoader().getResourceAsStream("resources.properties");


	@BeforeClass
	public void setUP() throws MalformedURLException {

		try {
			prop.load(inputStream);
		} catch (IOException ie) {
			System.out.println(ie.getMessage());
		}

		DesiredCapabilities capabilities = new DesiredCapabilities();

		capabilities.setCapability("deviceName", "R52K10XNSAH");
		capabilities.setCapability("automationName", "UiAutomator2");
		capabilities.setCapability("platformName", "Android");
		capabilities.setCapability("platformVersion", "9");
		capabilities.setCapability("appActivity", "view.activity.SplashActivity");
		capabilities.setCapability("appPackage", "com.oneviewhealthcare.carevisit");
		capabilities.setCapability("autoGrantPermissions", "true");

		capabilities.setCapability("noReset", "true");
		capabilities.setCapability("fullRest", "false");



		driver = new AndroidDriver<WebElement>(new URL("http://localhost:4723/wd/hub"), capabilities);

	}


	@Test 
	public void loginTest()throws Exception {

		
		WebDriverWait wait = new WebDriverWait(driver,90);


		By login = By.id(prop.getProperty("cv.login.username"));
		wait.until(ExpectedConditions.visibilityOfElementLocated(login));


		WebElement el = driver.findElement(login);


		Reporter.log("Launched Care Visit Android app");
		el.sendKeys(prop.getProperty("cv.login.username.value"));
		driver.findElement(By.id(prop.getProperty("cv.login.password"))).sendKeys(prop.getProperty("cv.login.password.value"));
		driver.findElement(By.id(prop.getProperty("cv.login.button"))).click();
		
		driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);

		By resList = By.id(prop.getProperty("LDP.ID.ResList.List"));
		wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(resList));
		assertTrue(driver.findElement(resList).isDisplayed());
		//wait.until(ExpectedConditions.attributeToBe(driver.findElement(By.id("title")), "text", "Oneview Facility-Other"));
		//wait.until(ExpectedConditions.stalenessOf(driver.findElement(By.id("database_status_icon"))));

		Reporter.log(" | User Logged in to Care **** Visit");

	}

	@Test
	public void findResident() {
		Boolean residentStatus = checkElementProps("Colleen", prop.getProperty("LDP.ID.ResList.List"));  
		assert residentStatus.equals(true);
	}

	public boolean checkElementProps (String textToFind, String elementID) {
		Boolean status = false;
		List<WebElement> resList = driver.findElements(By.id(elementID));
		Iterator<WebElement> it = resList.iterator();
		while (it.hasNext()) {
			WebElement resident = it.next();
			if((resident.toString()).contains(textToFind)) {
				System.out.println("___________________"+resident.toString());
				resident.click();
				status = true;
				break;
			}
			else {
				swipe();
			}
		}
		return status;
	}

	public void swipe() {
		
		TouchAction	 action = new TouchAction(driver1);
		action.press(point(1700, 1400)).moveTo(point(1700, 1600)).perform();
		
		/*
		 * Dimension size=driver.manage().window().getSize(); int
		 * width=(int)(size.width/2); int startPoint=(int)(size.getHeight() * 0.70); int
		 * endPoint=(int)(size.getHeight() * 0.20); int duration=2000;
		 * driver.swipe(width, startPoint, width, endPoint, duration);
		 */
	}

    @Test
    public void testScreenshotsOnFail(ITestContext context){
        System.out.println("Starting test that hast to fail..");
       // Assert.assertEquals(1, driver.findElements(By.xpath("//blah")).size());
    }

	
	public void screenShot(ITestResult result) {

		if(! result.isSuccess()) {
			System.out.println("Capturing Screenshot on Failure");
			try{

				TakesScreenshot screenshot=(TakesScreenshot)driver;

				File src=screenshot.getScreenshotAs(OutputType.FILE);


				Calendar cal = Calendar.getInstance();
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm");
				String dateStr = dateFormat.format(cal.getTime());
				String filename = result.getName()+"_"+dateStr+".png";
				String screen_shot_path = System.getProperty("user.dir") + "\\screen_shot\\"+filename;
				System.out.println(screen_shot_path+"~~~~~~~~~~~~~~_");
				FileUtils.copyFile(src, new File(screen_shot_path));
				Reporter.log("<td><a href='" + screen_shot_path
						+ ".jpg'><img src='" + screen_shot_path
						+ ".jpg' height='100' width='100' /></a></td>");
				System.out.println("Successfully captured a screenshot at file named :: "+screen_shot_path);

			}catch (Exception e){

				System.out.println("Exception while taking screenshot "+e.getMessage());
			} 
		}
		else {
			//do nothing
		}
	}


	
	  @AfterClass
	  public void tearDown() { 
		  driver.quit();
		  }
	 
}
